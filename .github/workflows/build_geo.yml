name: Download & Convert MetaCubeX geosite rules

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 20 * * *'  # 每天 20:00 UTC
env:
  skip_commit: 'true'
jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests pytz

      - name: Download & Convert
        run: |
          python3 <<'EOF'
          import os
          import requests
          import datetime
          import pytz

          # 读取文件列表
          files_path = "geo/files.txt"
          if not os.path.exists(files_path):
              print(f"❌ {files_path} not found")
              exit(1)

          with open(files_path, encoding="utf-8") as f:
              FILES = [line.strip() for line in f if line.strip() and not line.startswith("#")]

          os.makedirs("geo/geosite", exist_ok=True)

          for file in FILES:
              url = f"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/{file}.list"
              print(f"Processing {file} ...")

              r = requests.get(url)
              if r.status_code != 200:
                  print(f"❌ Failed to download {url}")
                  continue

              lines = r.text.strip().splitlines()
              rules_set = set()
              domains, suffixes, keywords, cidrs = [], [], [], []

              for line in lines:
                  line = line.strip()
                  if not line or line.startswith("#"):
                      continue
                  if line.startswith("+."):
                      rule = f"DOMAIN-SUFFIX,{line[2:]}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          suffixes.append(rule)
                  elif line.startswith(".@"):
                      rule = f"DOMAIN-KEYWORD,{line[2:]}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          keywords.append(rule)
                  elif any(c.isalpha() for c in line) and "." in line:
                      rule = f"DOMAIN,{line}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          domains.append(rule)
                  elif all(c.isdigit() or c=="." for c in line):
                      rule = f"IP-CIDR,{line}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          cidrs.append(rule)
                  else:
                      rules_set.add(line)

              total = len(domains) + len(suffixes) + len(keywords) + len(cidrs)

              # 排序输出：DOMAIN → DOMAIN-KEYWORD → DOMAIN-SUFFIX → IP-CIDR → 其他
              sorted_rules = sorted(rules_set, key=lambda x: (
                  0 if x.startswith("DOMAIN,") else
                  1 if x.startswith("DOMAIN-KEYWORD,") else
                  2 if x.startswith("DOMAIN-SUFFIX,") else
                  3 if x.startswith("IP-CIDR,") else 4, x
              ))

              # 更新时间（上海时区）
              now = datetime.datetime.now(pytz.timezone("Asia/Shanghai")).strftime("%Y-%m-%d %H:%M:%S")
              header = [
                  f"# NAME: {file}",
                  "# AUTHOR: SeesoN",
                  "# REPO: https://github.com/seeson/Custom_Loon_Rules",
                  f"# UPDATED: {now}"
              ]
              if domains: header.append(f"# DOMAIN: {len(domains)}")
              if keywords: header.append(f"# DOMAIN-KEYWORD: {len(keywords)}")
              if suffixes: header.append(f"# DOMAIN-SUFFIX: {len(suffixes)}")
              if cidrs: header.append(f"# IP-CIDR: {len(cidrs)}")
              header.append(f"# TOTAL: {total}")
              header.append("")

              content = "\n".join(header + sorted_rules)
              save_path = f"geo/geosite/{file}.list"
              with open(save_path, "w", encoding="utf-8") as f:
                  f.write(content + "\n")  # 保证文件以换行结尾

              print(f"✅ Saved {save_path}")
          EOF

      - name: Check for changes
        run: |
          if git diff --ignore-matching-lines="^# UPDATED:" --quiet; then
            echo "No changes, skipping commit."
            echo "skip_commit=true" >> $GITHUB_ENV
          else
            echo "Changes detected."
            echo "skip_commit=false" >> $GITHUB_ENV
          fi

      - name: Commit changes
        if: ${{ env.skip_commit == 'false' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 获取上海时间
          TIME=$(python3 -c "import datetime, pytz; print(datetime.datetime.now(pytz.timezone('Asia/Shanghai')).strftime('%Y-%m-%d %H:%M:%S'))")
          
          git add geo/geosite
          git commit -m "Updated on $TIME" || echo "No changes to commit"
          git push
