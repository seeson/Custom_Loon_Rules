name: Download & Convert MetaCubeX geosite

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 20 * * *"  # 每天 04:00 (上海时区+8) 自动运行，可按需修改

permissions:
  contents: write

jobs:
  convert:
    runs-on: ubuntu-latest
    env:
      FILES: "category-games@cn,category-game-platforms-download,tailscale,category-public-tracker,category-pt,category-communication,category-social-media-!cn,talkatone,openai,category-ai-!cn,category-speedtest,category-emby,dmm,category-games,category-entertainment,shopify,paypal,category-ecommerce,gfw"   # 用英文逗号分隔文件名

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      - name: Download & Convert Rules
        run: |
          mkdir -p geo/geosite

          python3 <<'EOF'
          import os, requests, datetime

          files = os.environ["FILES"].split(",")
          base_url = "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/"
          save_dir = "geo/geosite"

          for fname in files:
              fname = fname.strip()
              if not fname:
                  continue
              print(f"Processing {fname} ...")
              url = base_url + fname
              r = requests.get(url)
              if r.status_code != 200:
                  print(f"❌ Failed to download {url}")
                  continue

              lines = r.text.splitlines()
              rules_set = set()  # 用于去重
              counts = {"DOMAIN":0,"DOMAIN-KEYWORD":0,"DOMAIN-SUFFIX":0,"IP-CIDR":0}
              
              for line in lines:
                  line=line.strip()
                  if not line or line.startswith("#"):
                      continue
                  if line.startswith("+."):
                      # DOMAIN-SUFFIX
                      domain = line[2:]
                      rule = f"DOMAIN-SUFFIX,{domain}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          counts["DOMAIN-SUFFIX"]+=1
                  elif line.startswith(".@"):
                      # DOMAIN-KEYWORD
                      keyword = line[2:]
                      rule = f"DOMAIN-KEYWORD,{keyword}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          counts["DOMAIN-KEYWORD"]+=1
                  elif any(c.isalpha() for c in line) and "." in line:
                      # 普通域名
                      rule = f"DOMAIN,{line}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          counts["DOMAIN"]+=1
                  elif all(c.isdigit() or c=="." for c in line):
                      # 纯 IP
                      rule = f"IP-CIDR,{line}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          counts["IP-CIDR"]+=1
                  else:
                      rules_set.add(line)

              total = sum(counts.values())

              # 排序输出：先 DOMAIN，再 DOMAIN-KEYWORD，再 DOMAIN-SUFFIX，再 IP-CIDR
              sorted_rules = sorted(rules_set, key=lambda x: (
                  0 if x.startswith("DOMAIN,") else
                  1 if x.startswith("DOMAIN-KEYWORD,") else
                  2 if x.startswith("DOMAIN-SUFFIX,") else
                  3 if x.startswith("IP-CIDR,") else 4, x
              ))

              # 更新时间（上海时区）
              updated = datetime.datetime.utcnow() + datetime.timedelta(hours=8)
              updated_str = updated.strftime("%Y-%m-%d %H:%M:%S")

              header = [
                  f"# NAME: {fname}",
                  "# AUTHOR: SeesoN",
                  "# REPO: https://github.com/seeson/Custom_Loon_Rules",
                  f"# UPDATED: {updated_str}",
              ]
              if counts["DOMAIN"]: header.append(f"# DOMAIN: {counts['DOMAIN']}")
              if counts["DOMAIN-KEYWORD"]: header.append(f"# DOMAIN-KEYWORD: {counts['DOMAIN-KEYWORD']}")
              if counts["DOMAIN-SUFFIX"]: header.append(f"# DOMAIN-SUFFIX: {counts['DOMAIN-SUFFIX']}")
              if counts["IP-CIDR"]: header.append(f"# IP-CIDR: {counts['IP-CIDR']}")
              if total: header.append(f"# TOTAL: {total}")

              header.extend(sorted_rules)

              save_path = os.path.join(save_dir, f"{fname}.list")
              with open(save_path, "w") as f:
                  f.write("\n".join(header) + "\n")

              print(f"✅ Saved {save_path}")

          EOF

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add geo/geosite/
          git commit -m "Update geosite rules [skip ci]" || echo "No changes to commit"
          git push
