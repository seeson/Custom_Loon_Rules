name: Download & Convert MetaCubeX geosite rules

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 20 * * *'  # 每天 20:00 UTC

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests pytz

      - name: Download & Convert
        run: |
          python3 <<'EOF'
          import os
          import requests
          import datetime
          import pytz

          # 读取文件列表
          files_path = "geo/files.txt"
          if not os.path.exists(files_path):
              print(f"❌ {files_path} not found")
              exit(1)

          with open(files_path, encoding="utf-8") as f:
              FILES = [line.strip() for line in f if line.strip() and not line.startswith("#")]

          os.makedirs("geo/geosite", exist_ok=True)

          for file in FILES:
              url = f"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/{file}.list"
              print(f"Processing {file} ...")

              r = requests.get(url)
              if r.status_code != 200:
                  print(f"❌ Failed to download {url}")
                  continue

              lines = r.text.strip().splitlines()
              rules_set = set()
              domains, suffixes, keywords, cidrs = [], [], [], []

              for line in lines:
                  line = line.strip()
                  if not line or line.startswith("#"):
                      continue
                  if line.startswith("+."):
                      rule = f"DOMAIN-SUFFIX,{line[2:]}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          suffixes.append(rule)
                  elif line.startswith(".@"):
                      rule = f"DOMAIN-KEYWORD,{line[2:]}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          keywords.append(rule)
                  elif any(c.isalpha() for c in line) and "." in line:
                      rule = f"DOMAIN,{line}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          domains.append(rule)
                  elif all(c.isdigit() or c=="." for c in line):
                      rule = f"IP-CIDR,{line}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          cidrs.appe
name: Download & Convert geosite rules

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 20 * * *'  # 每天 20:00 UTC

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests pytz

      - name: Download & Convert
        run: |
          python3 <<'EOF'
          import os
          import requests
          import datetime
          import pytz

          # 读取文件列表
          files_path = "geo/files.txt"
          if not os.path.exists(files_path):
              print(f"❌ {files_path} not found")
              exit(1)

          with open(files_path, encoding="utf-8") as f:
              FILES = [line.strip() for line in f if line.strip() and not line.startswith("#")]

          os.makedirs("geo/geosite", exist_ok=True)

          for file in FILES:
              url = f"https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/{file}.list"
              print(f"Processing {file} ...")

              r = requests.get(url)
              if r.status_code != 200:
                  print(f"❌ Failed to download {url}")
                  continue

              lines = r.text.strip().splitlines()
              rules_set = set()
              domains, suffixes, keywords, cidrs = [], [], [], []

              for line in lines:
                  line = line.strip()
                  if not line or line.startswith("#"):
                      continue
                  if line.startswith("+."):
                      rule = f"DOMAIN-SUFFIX,{line[2:]}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          suffixes.append(rule)
                  elif line.startswith(".@"):
                      rule = f"DOMAIN-KEYWORD,{line[2:]}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          keywords.append(rule)
                  elif any(c.isalpha() for c in line) and "." in line:
                      rule = f"DOMAIN,{line}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          domains.append(rule)
                  elif all(c.isdigit() or c=="." for c in line):
                      rule = f"IP-CIDR,{line}"
                      if rule not in rules_set:
                          rules_set.add(rule)
                          cidrs.appe
